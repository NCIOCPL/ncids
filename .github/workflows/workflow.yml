name: Workflow
on: [ push, pull_request ]
jobs:
  build:
    name: Build, Test and Upload Artifacts
    runs-on: ubuntu-latest
    steps:
      ## Setup variables for build info
      - name: Set Variables
        id: set_vars
        run: |
          ## PUSH
          if [ "${{ github.event_name }}" == "push" ]; then
            BUILD_NAME=$(sed -E 's/refs\/(heads|tags)\///; s/\//__/g;' <<< $GITHUB_REF)
            BRANCH_NAME=$(sed -E 's/refs\/(heads|tags)\///;' <<< $GITHUB_REF)
            COMMIT_HASH=$(echo "${GITHUB_SHA}")
          ## PULL_REQUEST
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            BUILD_NAME=$(echo "pr-${{ github.event.pull_request.number }}")
            BRANCH_NAME=$(echo "pr-${{ github.event.pull_request.number }}")
            COMMIT_HASH=$(echo "${{ github.event.pull_request.head.sha }}")
          else
            ## ERROR
            exit 1
          fi

          ## For step checks and artifact deployment path.
          ## Same for push and PR
          export REPO_FULL=${{ github.repository }}
          export REPO_RE='([^/]+)/(.*)'
          [[ "$REPO_FULL" =~ $REPO_RE ]]
          REPO_OWNER=$(echo "${BASH_REMATCH[1]}")
          REPO_NAME=$(echo "${BASH_REMATCH[2]}")

          ## Set step outputs for later use
          echo ::set-output name=build_name::${BUILD_NAME}
          echo ::set-output name=branch_name::${BRANCH_NAME}
          echo ::set-output name=commit_hash::${COMMIT_HASH}
          echo ::set-output name=repo_owner::${REPO_OWNER}
          echo ::set-output name=repo_name::${REPO_NAME}
      ## This clones and checks out.
      - name: Checkout branch
        uses: actions/checkout@v1
      ## Setup node and npm caching.
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12'
          cache: 'yarn'
          registry-url: https://npm.pkg.github.com
          scope: '@nciocpl'
      ## Bootstrap Lerna
      - name: Bootstrap Lerna
        run: lerna bootstrap -- --frozen-lockfile
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ## Lint the code
      - name: Run Lint
        run: yarn lint
        env:
          CI: true
      ## Now test the code
      - name: Run Tests
        run: yarn test
        env:
          CI: true
      ## Now test the css
      - name: Check reference images
        id: reference
        run: |
          yarn test:reference
          git diff-index --ignore-submodules HEAD
          something_changed=`git diff-index --exit-code --ignore-submodules HEAD`
          if [-n "$something_changed" ]; then
            echo "New reference files were generated"
            exit 1
          else
            echo "No new reference files"
          fi
        env:
          CI: true
      - name: Run css tests
        run: yarn test:css
        env:
          CI: true
      ## Upload failed css tests
      - uses: actions/upload-artifact@v2
        name: Upload failed tests
        if: failure()
        with:
          name: failed-backstopjs
          path: /home/runner/work/ncids/ncids/testing/ncids-css-testing/.backstop/
      ## Upload successful css tests
      - uses: actions/upload-artifact@v2
        name: Upload successful tests
        with:
          name: success-backstopjs
          path: /home/runner/work/ncids/ncids/testing/ncids-css-testing/.backstop/test/**/report.json
      ## Build all the things for publishing. This is a proxy for testing.
      - name: Build Doc Site
        run: yarn docs-artifact
        env:
          CI: true
          ## This is used by Gatsby and NEEDs to be the path that will ultimately
          ## be in netstorage for designsystem-dev. NOTE: this should not get
          ## set for production builds.
          DOCS_PREFIX_PATH: ${{ format('/{0}', steps.set_vars.outputs.build_name) }}
      ## Generate build-info.json to house information about this specific build.
      ## Used for product test deployment
      - name: Create Build Information
        env:
          BUILD_INFO: ${{ toJson(steps.set_vars.outputs) }}
        run: |
          echo $BUILD_INFO
          echo $BUILD_INFO > ./dist/documentation-site/build-info.json
      ## TODO: Upload the test results artifact
      #      - name: Archive production artifacts
      #        uses: actions/upload-artifact@v1
      #        with:
      #          name: test-results
      #          path: coverage
      ## Upload the test results artifact
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: documentation-site
          path: dist/documentation-site/
  deploy-doc-site:
    name: Deploy documentation site to dev server
    ## Only do this if the repo is NCIOCPL
    if: startsWith(github.repository, 'NCIOCPL')
    ## This job depends on build completing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download built site
        uses: actions/download-artifact@v1
        with:
          name: documentation-site
      ## Setup vars from Build Info from build job
      - name: Setup Job env
        run: |
          ## Set Vars
          BUILD_NAME=$(jq -r '.build_name' < ./documentation-site/build-info.json)
          BRANCH_NAME=$(jq -r '.branch_name' < ./documentation-site/build-info.json)
          COMMIT_HASH=$(jq -r '.commit_hash' < ./documentation-site/build-info.json)
          REPO_OWNER=$(jq -r '.repo_owner' < ./documentation-site/build-info.json)
          REPO_NAME=$(jq -r '.repo_name' < ./documentation-site/build-info.json)

          ## Set Action Env
          echo "BUILD_NAME=${BUILD_NAME}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          echo "REPO_OWNER=${REPO_OWNER}" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

          ######## ERROR IF PR FROM FORK
          if [ "$REPO_OWNER" != "NCIOCPL" ]; then
            echo "YOU SHOULD NOT SEND PR FROM FORK!!!"
            exit 1
          fi
      ## We need to create the zip for netstorage
      - name: Zip documentation site
        run: |
          pushd documentation-site
          zip -r ../${BUILD_NAME}.zip *
          popd
      - name: Upload artifact to netstorage
        uses: nciocpl/netstorage-upload-action@v1.0.0
        with:
          hostname: ${{ secrets.ns_hostname }}
          cp-code: ${{ secrets.ns_cpcode }}
          key-name: ${{ secrets.ns_keyname }}
          key: ${{ secrets.ns_key }}
          index-zip: true
          local-path: ${{ format('{0}.zip', env.BUILD_NAME) }}
          ## Note this action automatically prepends the cpcode to the path.
          destination-path: ${{ format('/{0}.zip', env.BUILD_NAME) }}
      - name: Clear Site Cache
        uses: nciocpl/akamai-purge-action@v1.0.2
        with:
          hostname: ${{ secrets.eg_hostname }}
          client-token: ${{ secrets.eg_client_token }}
          client-secret: ${{ secrets.eg_client_secret }}
          access-token: ${{ secrets.eg_access_token }}
          type: "cpcodes"
          ref: ${{ format('{0},{1}', secrets.ns_cpcode, secrets.prop_cpcode) }}
